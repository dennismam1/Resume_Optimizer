// Document generation utilities
let docx;
let puppeteer;

try {
  docx = require('docx');
} catch (e) {}

try {
  puppeteer = require('puppeteer');
} catch (e) {}

/**
 * Generate a Word document from cover letter text
 * @param {string} coverLetterText - The cover letter content
 * @param {string} applicantName - Name of the applicant
 * @returns {Promise<Buffer>} - Word document buffer
 */
async function generateWordDocument(coverLetterText, applicantName = 'Applicant') {
  if (!docx) {
    throw new Error('docx package not available');
  }

  const { Document, Packer, Paragraph, TextRun, AlignmentType } = docx;

  // Split cover letter into paragraphs
  const paragraphs = coverLetterText.split('\n\n').filter(p => p.trim());

  const doc = new Document({
    sections: [{
      properties: {},
      children: [
        // Title
        new Paragraph({
          alignment: AlignmentType.CENTER,
          children: [
            new TextRun({
              text: "Cover Letter",
              bold: true,
              size: 32,
            }),
          ],
          spacing: { after: 400 }
        }),
        
        // Cover letter content
        ...paragraphs.map(paragraph => 
          new Paragraph({
            children: [
              new TextRun({
                text: paragraph.trim(),
                size: 24,
              }),
            ],
            spacing: { after: 200 }
          })
        )
      ],
    }],
  });

  return await Packer.toBuffer(doc);
}

/**
 * Generate a PDF document from cover letter text
 * @param {string} coverLetterText - The cover letter content
 * @param {string} applicantName - Name of the applicant
 * @returns {Promise<Buffer>} - PDF document buffer
 */
async function generatePDFDocument(coverLetterText, applicantName = 'Applicant') {
  if (!puppeteer) {
    throw new Error('puppeteer package not available');
  }

  const browser = await puppeteer.launch({ 
    headless: 'new',
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  try {
    const page = await browser.newPage();
    
    // Create HTML content for the cover letter
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>Cover Letter - ${applicantName}</title>
          <style>
            body {
              font-family: 'Times New Roman', serif;
              line-height: 1.6;
              margin: 1in;
              color: #333;
            }
            .header {
              text-align: center;
              margin-bottom: 30px;
            }
            .title {
              font-size: 24px;
              font-weight: bold;
              margin-bottom: 20px;
            }
            .content {
              font-size: 12px;
              white-space: pre-line;
            }
            .footer {
              margin-top: 40px;
              text-align: center;
              font-size: 10px;
              color: #666;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="title">Cover Letter</div>
          </div>
          <div class="content">${coverLetterText}</div>
          <div class="footer">
            Generated by Resume Optimizer
          </div>
        </body>
      </html>
    `;

    await page.setContent(htmlContent);
    
    const pdfBuffer = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '1in',
        right: '1in',
        bottom: '1in',
        left: '1in'
      }
    });

    return pdfBuffer;
  } finally {
    await browser.close();
  }
}

module.exports = {
  generateWordDocument,
  generatePDFDocument
};
